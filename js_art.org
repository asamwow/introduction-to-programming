* Spiral

#+BEGIN_SRC js
  var c = document.createElement("canvas");
  document.body.appendChild(c);
  c.width = screen.width;
  c.height = screen.height;
  var ctx = c.getContext("2d");
  ctx.lineWidth = 2;
  for (var x = 0; x < screen.width; x += 1) {
      if (x % 100 == 0) {
	  ctx.strokeStyle = "#" + ((1<<24)*Math.random() | 0).toString(16)
      }
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(screen.width-x, screen.height);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(0, x);
      ctx.lineTo(screen.width, screen.height-x);
      ctx.stroke();
  }
#+END_SRC

[[./Pictures/spiral.png]]
* Squares

#+BEGIN_SRC js
  function createSquare() {
      square = document.createElement("div")
      document.body.appendChild(square)
      square.style.position = "absolute"
      square.style.width = "50px"
      square.style.height = "50px"
      square.style.left = Math.random() * 1000
      square.style.top = Math.random() * 500
      square.style.background = "#" + ((1<<24)*Math.random() | 0).toString(16)
      setTimeout(createSquare, 1000)
  }
  createSquare()
#+END_SRC

[[./Pictures/squares.png]]
* Fractal

#+BEGIN_SRC js
document.body.style.backgroundColor = "grey"
function createCircle(radius) {
    var circle = document.createElement("div")
    circle.style.width = radius * 2;
    circle.style.height = radius * 2;
    circle.style.borderRadius = radius * 2 + "px";
    circle.style.position = "absolute"
    circle.style.background = "#" + ((1<<24)*Math.random() | 0).toString(16)
    return circle;
}
var initialRadius = window.innerWidth / 6
var parent = createCircle(initialRadius);
document.body.appendChild(parent);
parent.style.left = window.innerWidth / 2 - initialRadius
parent.style.top = window.innerHeight / 2 - initialRadius

function createChildren(parent, parentRadius, depth, trunkIndex) {
    let children = [];
    let newRadius = parentRadius / 2;
    // align circles to center of parent first
    for (var i = 0; i < 4; i++) {
	var child = createCircle(newRadius);
	parent.appendChild(child)
	child.style.marginLeft = parentRadius - newRadius
	child.style.marginTop = parentRadius - newRadius
	children.push(child);
    }
    // then offset 4 different directions
    let offsetRadius = parentRadius + newRadius;
    children[0].style.marginLeft = `calc(${children[0].style.marginLeft} + ${offsetRadius}px)`
    children[2].style.marginLeft = `calc(${children[2].style.marginLeft} - ${offsetRadius}px)`
    children[3].style.marginTop = `calc(${children[3].style.marginTop} + ${offsetRadius}px)`
    children[1].style.marginTop = `calc(${children[1].style.marginTop} - ${offsetRadius}px)`
    // recurse children
    if (depth > 0) {
	for (var i = 0; i < 4; i++) {
	    createChildren(children[i], newRadius, depth-1, (i+2) % 4)
	}
    }
    // lastly hide the child that was offset on top of the parent
    if (trunkIndex != undefined) {
	children[trunkIndex].style.display = "none";
    }
}

createChildren(parent, initialRadius, 6)
#+END_SRC

[[./Pictures/fractal.png]]
* Fish

#+BEGIN_SRC js
  var c = document.createElement("canvas");
  document.body.appendChild(c);
  c.width = window.innerWidth;
  c.height = window.innerHeight;
  var ctx = c.getContext("2d");
  ctx.lineWidth = 1;
  for (var x = 0; x < window.innerWidth; x += 1) {
      let sinInput = x / window.innerWidth * 40;
      let amplitude = 30;
      ctx.strokeStyle = "#000088"
      ctx.beginPath();
      ctx.moveTo(x, window.innerHeight);
      ctx.lineTo(x, window.innerHeight / 6 + Math.sin(sinInput) * amplitude);
      ctx.stroke();
      sinInput += Math.PI / 2;
      ctx.strokeStyle = "#000055"
      ctx.beginPath();
      ctx.moveTo(x, window.innerHeight);
      ctx.lineTo(x, window.innerHeight / 3 + Math.sin(sinInput) * amplitude);
      ctx.stroke();
      sinInput += Math.PI / 2;
      ctx.strokeStyle = "#000033"
      ctx.beginPath();
      ctx.moveTo(x, window.innerHeight);
      ctx.lineTo(x, window.innerHeight / 2 + Math.sin(sinInput) * amplitude);
      ctx.stroke();
  }
  function makeFish() {
      var fish = document.createElement("img");
      document.body.appendChild(fish);
      fish.src = "./fish.svg"
      fish.style.position = "absolute"
      fish.style.width = Math.random() * 10 + 5 + "vw"
      fish.style.height = Math.random() * 10 + 5 + "vh"
      fish.style.left = Math.random() * window.innerWidth;
      fish.style.bottom = Math.random() * window.innerHeight / 4;
      fish.style.transform = `rotateZ(${Math.random() * 360}deg)`
  }
  for (var x = 0; x < 50; x++) {
      makeFish();
  }
#+END_SRC

[[./Pictures/fish.png]]
* Stars

#+BEGIN_SRC js
  document.body.style.backgroundColor = "black";
  var c = document.createElement("canvas");
  document.body.appendChild(c);
  c.width = window.innerWidth;
  c.height = window.innerHeight;
  var ctx = c.getContext("2d");
  ctx.lineWidth = 1;
  for (var star = 0; star < 40; star++) {
      let corners = Math.round(Math.random() * 5 + 3)
      let x = Math.random() * window.innerWidth
      let y = Math.random() * window.innerHeight
      let radius = Math.random() * 150 + 50;
      let offsetWidth = Math.random() * 10 + radius / 10;
      ctx.strokeStyle = "#" + ((1<<24)*Math.random() | 0).toString(16)
      for (let i = 0; i < corners; i++) {
	  for (var xOffset = -offsetWidth; xOffset <= offsetWidth; xOffset++) {
	      for (var yOffset = -offsetWidth; yOffset <= offsetWidth; yOffset++) {
		  ctx.beginPath();
		  ctx.moveTo(x + xOffset, y + yOffset);
		  let cornerRotation = i * Math.PI * 2 / corners;
		  ctx.lineTo(Math.cos(cornerRotation) * radius + x, Math.sin(cornerRotation) * radius + y);
		  ctx.stroke();
		  // shading
		  if (xOffset > 0 && yOffset > 0) {
		      let oldColor = ctx.strokeStyle;
		      ctx.strokeStyle = "#FFFFFF55"
		      ctx.beginPath();
		      ctx.moveTo(x + xOffset, y + yOffset);
		      let cornerRotation = i * Math.PI * 2 / corners;
		      ctx.lineTo(Math.cos(cornerRotation) * radius + x, Math.sin(cornerRotation) * radius + y);
		      ctx.stroke();
		      ctx.strokeStyle = oldColor;
		  }
	      }
	  }
      }
  }
#+END_SRC

[[./Pictures/stars.png]]
* Honeycomb

#+BEGIN_SRC js
  var c = document.createElement("canvas");
  document.body.appendChild(c);
  c.width = window.innerWidth;
  c.height = window.innerHeight;
  var ctx = c.getContext("2d");
  ctx.lineWidth = 1;
  let Ystep = 50;
  let Xstep = 50 * Math.sqrt(2);
  var color = "#551155"
  for (var y = -Ystep; y < window.innerHeight; y += Ystep) {
      for (var x = -Xstep; x < window.innerWidth; x += Xstep) {
	  let rowStagger = 0;
	  let rowTransparency = 230;
	  if (y % (Ystep * 2) == 0) {
	      rowStagger = Xstep / 2;
	      rowTransparency = 185;
	  }
	  let stagger = Xstep / 2;
	  ctx.beginPath();
	  ctx.fillStyle = color + rowTransparency.toString(16);
	  ctx.moveTo(x + rowStagger, y);
	  ctx.lineTo(x + rowStagger + Xstep, y);
	  ctx.lineTo(x + rowStagger - stagger + Xstep, y + Ystep);
	  ctx.closePath();
	  ctx.fill();
	  ctx.fillStyle = color + (rowTransparency - 30).toString(16);
	  ctx.beginPath();
	  ctx.moveTo(x + rowStagger, y);
	  ctx.lineTo(x + rowStagger - stagger, y + Ystep);
	  ctx.lineTo(x + rowStagger - stagger + Xstep, y + Ystep);
	  ctx.closePath();
	  ctx.fill()
      }
  }
#+END_SRC

[[./Pictures/honeycomb.png]]
