* Spiral

#+BEGIN_SRC js
  var c = document.createElement("canvas");
  document.body.appendChild(c);
  c.width = screen.width;
  c.height = screen.height;
  var ctx = c.getContext("2d");
  ctx.lineWidth = 2;
  for (var x = 0; x < screen.width; x += 1) {
      if (x % 100 == 0) {
	  ctx.strokeStyle = "#" + ((1<<24)*Math.random() | 0).toString(16)
      }
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(screen.width-x, screen.height);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(0, x);
      ctx.lineTo(screen.width, screen.height-x);
      ctx.stroke();
  }
#+END_SRC

[[./Pictures/spiral.png]]
* Squares

#+BEGIN_SRC js
  function createSquare() {
      square = document.createElement("div")
      document.body.appendChild(square)
      square.style.position = "absolute"
      square.style.width = "50px"
      square.style.height = "50px"
      square.style.left = Math.random() * 1000
      square.style.top = Math.random() * 500
      square.style.background = "#" + ((1<<24)*Math.random() | 0).toString(16)
      setTimeout(createSquare, 1000)
  }
  createSquare()
#+END_SRC

[[./Pictures/squares.png]]
* Fractal

#+BEGIN_SRC js
document.body.style.backgroundColor = "grey"
function createCircle(radius) {
    var circle = document.createElement("div")
    circle.style.width = radius * 2;
    circle.style.height = radius * 2;
    circle.style.borderRadius = radius * 2 + "px";
    circle.style.position = "absolute"
    circle.style.background = "#" + ((1<<24)*Math.random() | 0).toString(16)
    return circle;
}
var initialRadius = window.innerWidth / 6
var parent = createCircle(initialRadius);
document.body.appendChild(parent);
parent.style.left = window.innerWidth / 2 - initialRadius
parent.style.top = window.innerHeight / 2 - initialRadius

function createChildren(parent, parentRadius, depth, index) {
    var children = [];
    var newRadius = parentRadius / 2.1;
    for (var i = 0; i < 4; i++) {
	var child = createCircle(newRadius);
	parent.appendChild(child)
	child.style.marginLeft = parentRadius - newRadius
	child.style.marginTop = parentRadius - newRadius
	children.push(child);
    }
    var offsetRadius = parentRadius + newRadius;
    children[0].style.transform = `translate(${offsetRadius}px, 0px)`
    children[2].style.transform = `translate(-${offsetRadius}px, 0px)`
    children[3].style.transform = `translate(0px, ${offsetRadius}px)`
    children[1].style.transform = `translate(0px, -${offsetRadius}px)`
    if (depth > 0) {
	for (var i = 0; i < 4; i++) {
	    createChildren(children[i], newRadius, depth-1, (i+2) % 4)
	}
    }
    children[index].style.display = "none";
}

createChildren(parent, initialRadius, 5, 5)
#+END_SRC

[[./Pictures/fractal.png]]
